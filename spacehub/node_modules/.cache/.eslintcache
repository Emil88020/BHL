[{"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/index.js":"1","/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/App.js":"2","/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/export.js":"3","/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/home/Home.jsx":"4","/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/chatBot/ChatBox.jsx":"5","/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/home/custom.js":"6","/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/charts/Heartrate.jsx":"7","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/index.js":"8","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/App.js":"9","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/export.js":"10","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/home/Home.jsx":"11","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/chatBot/ChatBox.jsx":"12","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/home/custom.js":"13","/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/charts/Heartrate.jsx":"14"},{"size":256,"mtime":1733633857710,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1733633857648,"results":"17","hashOfConfig":"16"},{"size":106,"mtime":1733633857716,"results":"18","hashOfConfig":"16"},{"size":495,"mtime":1733633857717,"results":"19","hashOfConfig":"16"},{"size":4914,"mtime":1733643840395,"results":"20","hashOfConfig":"16"},{"size":550,"mtime":1733633857718,"results":"21","hashOfConfig":"16"},{"size":3929,"mtime":1733633857712,"results":"22","hashOfConfig":"16"},{"size":256,"mtime":1733645412650,"results":"23","hashOfConfig":"24"},{"size":375,"mtime":1733645412582,"results":"25","hashOfConfig":"24"},{"size":106,"mtime":1733645412658,"results":"26","hashOfConfig":"24"},{"size":495,"mtime":1733645412659,"results":"27","hashOfConfig":"24"},{"size":4914,"mtime":1733645412655,"results":"28","hashOfConfig":"24"},{"size":550,"mtime":1733645412661,"results":"29","hashOfConfig":"24"},{"size":5678,"mtime":1733645539912,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g9kpr1",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r2577i",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/index.js",[],[],"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/App.js",[],[],"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/export.js",[],[],"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/home/Home.jsx",[],[],"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/chatBot/ChatBox.jsx",[],[],"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/home/custom.js",[],[],"/nfs/homes/dszafran/Desktop/BHL/BHL3/BHL/spacehub/src/sections/charts/Heartrate.jsx",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/index.js",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/App.js",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/export.js",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/home/Home.jsx",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/chatBot/ChatBox.jsx",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/home/custom.js",[],[],"/nfs/homes/anabiev/BHL-1/BHL/spacehub/src/sections/charts/Heartrate.jsx",["74"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport \"./charts.css\";\n\nconst CustomTooltip = ({ payload, label }) => {\n  if (payload && payload.length) {\n    const timestamp = label;\n    const date = new Date(timestamp);\n    const formattedDate = date.toLocaleString(\"en-GB\", {\n      month: \"short\",\n      day: \"2-digit\",\n    });\n\n\n    const value = payload[0].value;\n\n    return (\n      <div className=\"custom-tooltip\">\n        <p>{`Date: ${formattedDate}`}</p>\n        <p>{`Value: ${value}`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst Chart = ({ data, dataKey, label, strokeColor, height = 300 }) => (\n  <ResponsiveContainer width=\"100%\" height={height}>\n    <LineChart data={data}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"timestamp\"\n        tickFormatter={(timestamp) =>\n          new Date(timestamp).toLocaleString(\"en-GB\", {\n            month: \"short\",\n            day: \"2-digit\",\n          })\n        }\n      />\n      <YAxis />\n      <Tooltip\n        contentStyle={{\n          backgroundColor: \"#fff\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"5px\",\n        }}\n        itemStyle={{\n          color: \"#fff\",\n        }}\n        labelStyle={{\n          color: \"#8884d8\",\n        }}\n        labelFormatter={(label) => new Date(label).toLocaleString()}\n      />\n\n      <Legend />\n      <Line type=\"monotone\" dataKey={dataKey} stroke={strokeColor} />\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nconst Heartrate = () => {\n  const [heartRateData, setHeartRateData] = useState([]);\n  const [bloodPressureData, setBloodPressureData] = useState([]);\n  const [oxygenSaturationData, setOxygenSaturationData] = useState([]);\n  const [temperatureData, setTemperatureData] = useState([]);\n  const [respiratoryRateData, setRespiratoryRateData] = useState([]);\n  const [co2LevelData, setCo2LevelData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const generateFakeData = () => {\n      const currentTime = new Date();\n      const heartRate = [];\n      const bloodPressure = [];\n      const oxygenSaturation = [];\n      const temperature = [];\n      const respiratoryRate = [];\n      const co2Level = [];\n\n      for (let i = 0; i < 10; i++) {\n\n        const newDate = new Date(currentTime);\n        newDate.setDate(currentTime.getDate() + i);\n\n        const timestamp = newDate.getTime();\n\n        heartRate.push({\n          timestamp,\n          value: Math.floor(Math.random() * (120 - 60 + 1)) + 60,\n        });\n\n        bloodPressure.push({\n          timestamp: newDate.toLocaleString(),\n          systolic: Math.floor(Math.random() * (180 - 110 + 1)) + 110,\n          diastolic: Math.floor(Math.random() * (120 - 70 + 1)) + 70,\n        });\n\n        oxygenSaturation.push({\n          timestamp,\n          value: Math.floor(Math.random() * (100 - 90 + 1)) + 90,\n        });\n\n        temperature.push({\n          timestamp,\n          value: (Math.random() * (37 - 36) + 36).toFixed(1),\n        });\n\n        respiratoryRate.push({\n          timestamp,\n          value: Math.floor(Math.random() * (20 - 12 + 1)) + 12,\n        });\n\n        co2Level.push({\n          timestamp,\n          value: Math.floor(Math.random() * (10 - 3 + 1)) + 3, \n        });\n      }\n\n      setHeartRateData(heartRate);\n      setBloodPressureData(bloodPressure);\n      setOxygenSaturationData(oxygenSaturation);\n      setTemperatureData(temperature);\n      setRespiratoryRateData(respiratoryRate);\n      setCo2LevelData(co2Level);\n      setIsLoading(false);\n    };\n\n    generateFakeData();\n  }, []);\n\n  return (\n    <div className=\"wrapper-chart\">\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Heart Rate</h3>\n            <Chart\n              data={heartRateData}\n              dataKey=\"value\"\n              label=\"Heart Rate\"\n              strokeColor=\"#8884d8\"\n            />\n          </div>\n\n          <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Blood Pressure</h3>\n            <Chart\n              data={bloodPressureData}\n              dataKey=\"value\"\n              label=\"Blood Pressure\"\n              strokeColor=\"#fffff\"\n            />\n          </div>\n\n          <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Oxygen Saturation</h3>\n            <Chart\n              data={oxygenSaturationData}\n              dataKey=\"value\"\n              label=\"Oxygen Saturation\"\n              strokeColor=\"#ff7300\"\n            />\n          </div>\n\n          <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Temperature</h3>\n            <Chart\n              data={temperatureData}\n              dataKey=\"value\"\n              label=\"Temperature\"\n              strokeColor=\"#ff4500\"\n            />\n          </div>\n\n          <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Respiratory Rate</h3>\n            <Chart\n              data={respiratoryRateData}\n              dataKey=\"value\"\n              label=\"Respiratory Rate\"\n              strokeColor=\"#32cd32\"\n            />\n          </div>\n\n          <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Carbon Dioxide Level</h3>\n            <Chart\n              data={co2LevelData}\n              dataKey=\"value\"\n              label=\"CO2 Level\"\n              strokeColor=\"#ff0000\"\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Heartrate;\n\n\n",{"ruleId":"75","severity":1,"message":"76","line":14,"column":7,"nodeType":"77","messageId":"78","endLine":14,"endColumn":20},"no-unused-vars","'CustomTooltip' is assigned a value but never used.","Identifier","unusedVar"]